---
- name: Deploy AWS EC2 for WordPress
  hosts: localhost

  module_defaults:
    group/aws:
      region: us-east-1

  vars:
    ec2_instance:
      name: wordpress-instance-1
      key_name: 'Your AWS keypair name' # Change this to your pre-created AWS key pair
      image_id: ami-016eb5d644c333ccb # RHEL 9 image id in us-east-1
      security_group: wordpress_sg
      wait: true
      tags:
        project: wordpress

  tasks:
        # # Change cidr_block to 10.0.0.0/16
    - name: Create VPC called wordpress_vpc and register as wordpress_vpc
      amazon.aws.ec2_vpc_net:
        name: wordpress_vpc
        cidr_block: 10.0.0.80/16
        tags:
          project: wordpress
      register: wordpress_vpc

    - name: Create vpc_id var
      ansible.builtin.set_fact:
        vpc_id: "{{ wordpress_vpc.vpc.id }}"

        # #  Optional - Fix description
    - name: Create security group called wordpress_sg for wordpress_vpc allow web and ssh
      amazon.aws.ec2_security_group:
        name: wordpress_sg
        description: Allow port 80, 443, 22 and 80 for Wordpress vpc
        vpc_id: "{{ vpc_id }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
      register: wordpress_sg

    - name: Create internet gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc_id }}"
        state: present
        tags:
          project: wordpress
      register: wordpress_igw

        # # Change cidr to 10.0.0.0/16
    - name: Create wordpress_vpc subnet
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc_id }}"
        cidr: 10.0.0.80/16
        tags:
          project: wordpress
      register: wordpress_vpc_subnet

    - name: Create route table in wordpress_igw
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_id }}"
        subnets:
          - "{{ wordpress_vpc_subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ wordpress_igw.gateway_id }}"
        tags:
          project: wordpress
        state: present

    - name: Create vpc_subnet_id var
      ansible.builtin.set_fact:
        vpc_subnet_id: "{{ wordpress_vpc_subnet.subnet.id }}"

    - name: Create t3.micro instance using ec2_instance var
      amazon.aws.ec2_instance:
        name: "{{ ec2_instance.name }}"
        key_name: "{{ ec2_instance.key_name }}"
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        security_group: "{{ ec2_instance.security_group }}"
        network:
          assign_public_ip: true
        image_id: "{{ ec2_instance.image_id }}"
        tags: "{{ ec2_instance.tags }}"
        wait: "{{ ec2_instance.wait }}"

    - name: Refresh inventory
      ansible.builtin.meta: refresh_inventory

- name: Install and configure WordPress
  hosts: wordpress
  become: true
  gather_facts: false

  vars:
    wordpress_dependencies:
      - httpd
      - php
      - php-mysqli
      - mariadb-server
    rhel_services:
      - httpd
      - php-fpm
      - mariadb

  tasks:
    - name: Wait for connection
      ansible.builtin.wait_for_connection:

    - name: Install packages using wordpress_dependencies var
      ansible.builtin.package:
        name: "{{ wordpress_dependencies }}"
        state: present

    - name: Download and unarchive wordpress
      ansible.builtin.unarchive:
        src: https://wordpress.org/latest.tar.gz
        dest: /var/www/html
        remote_src: true

    - name: Start and enable services using rhel_services var
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
        enabled: true
      loop: "{{ rhel_services }}"

- name: Gather ec2 host name
  hosts: localhost

  module_defaults:
    group/aws:
      region: us-east-1

  tasks:
    - name: Gather instance info for tag name wordpress-instance-1 and instance-state-name running
      amazon.aws.ec2_instance_info:
        filters:
          tag:Name: wordpress-instance-1
          instance-state-name: running
      register: ec2_instance_info

#  Navigate to http://<ec2_instances.instances[0].public_dns_name>/wordpress/readme.html
