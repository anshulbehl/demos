---
- name: Provision Linux ec2 instances
  hosts: localhost
  gather_facts: false

  tasks:
    - name: Provision an EC2 Linux instances
      amazon.aws.ec2_instance:
        state: "{{ item.state }}"
        name: "{{ item.name }}"
        region: "{{ item.region }}"
        key_name: "{{ item.key_name }}"
        vpc_subnet_id: "{{ item.vpc_subnet_id }}"
        instance_type: "{{ item.instance_type }}"
        security_group: "{{ item.security_group }}"
        exact_count: "{{ item.exact_count }}"
        network: "{{ item.network }}"
        image_id: "{{ item.image_id }}"
        tags: "{{ item.tags }}"
        wait: "{{ item.wait }}"
        user_data: "{{ item.user_data | default(omit)}}"
      register: __ec2_results
      loop: "{{ ec2_linux_instances }}"
      tags:
        - create-instances

    - name: Get ec2 instance info
      amazon.aws.ec2_instance_info:
        region: "{{ ec2_region }}"
        filters:
          tag:Demo: wave
          tag:Os: linux
          instance-state-name: [ "running"]
      register: __ec2_instance_info
      tags:
        - create-instances

    - name: Wait for ec2 instances to start
      when:
        - ('"linux" in groups') and ('groups["linux"]')
      tags:
        - create-instances
      block:
        - name: Wait for ec2 instances - SSH
          ansible.builtin.wait_for:
            host: "{{ __instances_ssh_async_item.public_dns_name }}"
            port: 22
          loop: "{{ __ec2_instance_info.instances }}"
          loop_control:
            loop_var: __instances_ssh_async_item
            label: "{{ __instances_ssh_async_item.public_dns_name }}"
          async: 1000
          poll: 0
          register: __instances_ssh_async
          changed_when: not __instances_ssh_async.changed

        - name: "Wait for ec2 instances - SSH | Async"
          ansible.builtin.async_status:
            jid: "{{ __instances_ssh_async_result_item.ansible_job_id }}"
          retries: 120
          delay: 1
          loop: "{{ __instances_ssh_async.results }}"
          loop_control:
            loop_var: __instances_ssh_async_result_item
            label: "{{ __instances_ssh_async_result_item.__instances_ssh_async_item.public_dns_name }}"
          until: __instances_ssh_async_result.finished
          register: __instances_ssh_async_result
          when: __instances_ssh_async_result_item.ansible_job_id is defined

    - name: Add ec2 instances to inventory group - linux
      ansible.builtin.add_host: 
        hostname: "{{ item.public_dns_name }}"
        groups: linux
        ansible_user: ec2-user
      loop: "{{ __ec2_instance_info.instances }}"
      when:
        - (__ec2_instance_info.instances is defined) and (__ec2_instance_info.instances | length > 0)

- name: Configure Linux instances
  hosts: linux
  gather_facts: true
  become: true
  tags:
    - config-linux

  tasks:
    - name: Remove cloud CDN repos - {{ inventory_hostname }}
      when:
        - ansible_distribution == "RedHat"
      block:
        - name: Remove rhui client packages
          ansible.builtin.dnf:
            name: rh-amazon-rhui-client*
            state: removed

        - name: Get current repos
          ansible.builtin.command:
            cmd: ls /etc/yum.repos.d/
          register: repos
          changed_when: False

        - name: Remove existing rhui repos
          ansible.builtin.file:
            path: "/etc/yum.repos.d/{{ item }}"
            state: absent
          loop: "{{ repos.stdout_lines }}"
          when: "'rhui' in item"
  
        - name: Manage repos with subscription manager
          ansible.builtin.lineinfile:
            path: /etc/rhsm/rhsm.conf
            regexp: '^manage_repos'
            line: 'manage_repos = 1'

    - name: Subscribe RHEL instances
      when: 
        - ansible_distribution == "RedHat"
      block:
        - name: Subscribe to RHSM - {{ rhsm_username }}
          community.general.redhat_subscription:
            state: present
            activationkey: "{{ rhsm_activation_key }}"
            org_id: "{{ rhsm_org_id }}"
          async: 1000
          poll: 0
          register: __rhsm_async_item
          changed_when: not __rhsm_async_item.changed

        - name: Subscribe to RHSM | Async
          ansible.builtin.async_status:
            jid: "{{ __rhsm_async_item.ansible_job_id }}"
          retries: 60
          delay: 1
          until: __rhsm_async_result_item.finished
          register: __rhsm_async_result_item
          when: __rhsm_async_item.ansible_job_id is defined

    - name: Install nodejs On RHEL 8 - {{ inventory_hostname }}
      ansible.builtin.package:
        name:
          - nodejs
        state: present
      register: __linux_packages
      when: 
        - ansible_distribution_major_version == "8"
        - ansible_distribution == "RedHat"

    - name: Install packages On RHEL - {{ inventory_hostname }}
      ansible.builtin.package:
        name:
          - scap-security-guide
          - yara
          - openscap
          - openscap-scanner
          - rhc
          - rhc-worker-playbook
        state: present
      register: __linux_packages
      when: 
        - ansible_distribution == "RedHat"



    - name: Configure Insights client -- {{ inventory_hostname }}
      vars:
        redhat_portal_username: "{{ rhsm_username }}"
        redhat_portal_password: "{{ rhsm_password }}"
        insights_tags:
          env: dev
          demo: wave
        autoconfig: false
      ansible.builtin.include_role:
        name: redhatinsights.insights.insights_client
      when: ansible_os_family == 'RedHat'

      # - name: Configure Insights compliance -- {{ inventory_hostname }}
      #   ansible.builtin.include_role:
      #     name: redhatinsights.insights.compliance
      #     tasks_from: run